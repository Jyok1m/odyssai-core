name: Build and Deploy Docker Image

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "requirements*.txt"
      - "environment*.yml"
      - "Dockerfile"
      - "pyproject.toml"
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate deployment artifact
        run: |
          mkdir -p deployment
          cat > deployment/docker-compose.prod.yml << 'EOF'
          version: '3.8'
          services:
            odyssai-backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
              container_name: odyssai-backend
              environment:
                - BACKEND_PORT=9000
              env_file:
                - .env
              volumes:
                - ./.secrets:/app/.secrets:ro
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.odyssai.rule=Host(\`odyssai.yourdomain.com\`) || PathPrefix(\`/api\`)"
                - "traefik.http.routers.odyssai.entrypoints=websecure"
                - "traefik.http.routers.odyssai.tls.certresolver=letsencrypt"
                - "traefik.http.services.odyssai.loadbalancer.server.port=9000"
              networks:
                - traefik-public
              restart: unless-stopped

            traefik:
              image: traefik:v3.5
              container_name: traefik
              command:
                - "--api.dashboard=true"
                - "--providers.docker=true"
                - "--providers.docker.network=traefik-public"
                - "--entrypoints.web.address=:80"
                - "--entrypoints.websecure.address=:443"
                - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
                - "--certificatesresolvers.letsencrypt.acme.email=your@email.com"
                - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
                - "--log.level=INFO"
              ports:
                - "80:80"
                - "443:443"
                - "8080:8080"
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock:ro
                - letsencrypt:/letsencrypt
              networks:
                - traefik-public
              restart: unless-stopped

          networks:
            traefik-public:
              external: true

          volumes:
            letsencrypt:
          EOF

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-config
          path: deployment/
